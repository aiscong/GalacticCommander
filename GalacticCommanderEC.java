///////////////////////////////////////////////////////////////////////////////
//                   ALL STUDENTS COMPLETE THESE SECTIONS
// Title:            Galactic Commander
// Files:            GalacticCommanderEC.java
// Semester:         CS302 Fall 2012
//
// Author:           Cong Sun  csun27@wisc.edu
// CS Login:         cong
// Lecturer's Name:  Ben Miller
// Lab Section:      361
//
//                   PAIR PROGRAMMERS COMPLETE THIS SECTION
// Pair Partner:     no pair partner
// CS Login:         no pair partner
// Lecturer's Name:  no pair partner
// Lab Section:      no pair partner
//
//                   STUDENTS WHO GET HELP FROM ANYONE OTHER THAN THEIR PARTNER
// Credits:          None
//////////////////////////// 80 columns wide //////////////////////////////////
import java.io.IOException;
import java.util.Random;
/**
 * This class is the program entry point and implements game initialization,
 * input handling, and scoring. It keeps track of each player's ship, base,
 * flag, and score. This is where you must add code to create game objects and
 * add them to the game, handle input, and keep track of the score.
 */
public class GalacticCommanderEC extends Game {
	// Declare additional class variables here if necessary. Remember that all
	// class variables you add must be declared private!
	private Ship player1Ship;//reference of player 1 ship
	private Ship player2Ship;//reference of player 2 ship
	private int score1 = 0;//the score of player 1
	private int score2 = 0;//the score of player 2
	//from Config, largest radius for an Asteroid is 50
	//accroding to Config, the largest asteroid radius is 50
	private final int largestAstRadi = 50;
	//random generator for x position
	Random rngx = new Random();
	//random generator for y position
	Random rngy = new Random();

	/**
	 * Creates a new instance of the game. This method is completed for you.
	 * <p>
	 * DO NOT add, change, or remove code here!
	 * </p>
	 * 
	 * @throws IOException
	 */
	public GalacticCommanderEC() throws IOException {
		super();
	}

	/**
	 * This is the game's main method.  It creates a new game object,
	 * initializes the game, and starts the game loop. It is completed for you.
	 * <p>
	 * DO NOT add, change, or remove code here!
	 * </p>
	 * @param args
	 * @throws IOException
	 */
	public static void main(String args[]) throws IOException {
		// THIS METHOD HAS BEEN COMPLETED FOR YOU. DO NOT ADD CODE HERE.

		// Create a new game
		Game game = new GalacticCommanderEC();
		// Initialize the game
		game.initGame();
		// Start the game
		game.runGameLoop();
	}
	/**
	 * Initializes the game. Creates each of the ships, flags, bases, and
	 * asteroids and adds them to the game. Also initializes the player's
	 * scores.
	 */
	@Override
	void initGame() {
		// TODO
		int asterx = 0;//x position of asteroid
		int astery = 0;//y position of asteroid
		//divide the width of screen between two ships into three parts 
		//put each ship in each zone make them not collide 
		//with each other
		int increment = 200;
		//the max possible x position that each time generated by random generator
		int maxWidth = 100;
		//the min possible x position that each time generated by random generator
		int minWidth = 50;
		// 0. Create and add asteroids (complete)
		for (int i = 0; i < Config.ASTEROID_POSITIONS.length; ) {
			//make position of asteroid be at least one radius from any edge
			maxWidth = maxWidth + increment;
			minWidth = minWidth + increment;
			asterx = rngx.nextInt(maxWidth - minWidth + 1)+
			minWidth;
			astery = rngy.nextInt(Config.GAME_HEIGHT - largestAstRadi - 
					largestAstRadi + 1)+
			largestAstRadi;
		
				Position randAster = new Position(asterx, astery);
				Asteroid a = new Asteroid(this, randAster, i);
				//add asteroid to the game
				addGameObject(a);
				i++;//number of added asteroid incremented
			}

		// 1. Create one Base object for each player. The first argument to the
		//    constructor is the parent Game, which is this. The second argument
		//    is the PlayerID, which should be one of Config.PLAYER1_ID or
		//    Config.PLAYER2_ID. The last two arguments give the position of the
		//    base, which should be set to Config.BASE_PLAYER1_X,
		//    Config.BASE_PLAYER1_Y, and so on.
		//create a player 1 base
		Base player1Base = new Base(this,Config.PLAYER1_ID,
				Config.BASE_PLAYER1_X,Config.BASE_PLAYER1_Y);
		//create a player 2 base
		Base player2Base = new Base(this,Config.PLAYER2_ID,
				Config.BASE_PLAYER2_X,Config.BASE_PLAYER2_Y);
		//add the player base 1 to the game
		addGameObject(player1Base);
		//add the player base 2 to the game
		addGameObject(player2Base);
		// 2. Add one ship for each player to the game. The first four arguments
		//    to the Ship constructor are analogous to the argument for bases.
		//    The fifth argument is the initial rotation of the ship, which
		//    should be set to Config.SHIP_PLAYER1_ROTATION or
		//    Config.SHIP_PLAYER2_ROTATION, as appropriate.
		//create the player 1 ship
		player1Ship = new Ship (this, Config.PLAYER1_ID,Config.SHIP_PLAYER1_X,
				Config.SHIP_PLAYER1_Y,Config.SHIP_PLAYER1_ROTATION);
		//create the player 2 ship
		player2Ship = new Ship (this, Config.PLAYER2_ID,Config.SHIP_PLAYER2_X,
				Config.SHIP_PLAYER2_Y,Config.SHIP_PLAYER2_ROTATION);
		//add the player 1 ship to the game
		addGameObject(player1Ship);
		//add the player 2 ship to the game
		addGameObject(player2Ship);
		// 3. Add one flag for each player to the game. The initial x and y
		//	  coordinates are the same as the corresponding base. That is,
		//	  player 1's flag starts at the exact same position as player 1's
		//	  base.
		//create the player 1 flag
		Flag player1Flag = new Flag(this, Config.PLAYER1_ID,
				Config.BASE_PLAYER1_X,Config.BASE_PLAYER1_Y);
		//create the player 2 flag
		Flag player2Flag = new Flag(this, Config.PLAYER2_ID,
				Config.BASE_PLAYER2_X,Config.BASE_PLAYER2_Y);
		// add the player 1 flag to the game
		addGameObject(player1Flag);
		//add the player 2 flag to the game
		addGameObject(player2Flag);
		// 4. Initialize the score displays. Each player's score should be set
		//    to zero. Player1's score should be displayed in
		//    Graphics.LEFT_PANEL using getGraphics().setPanelText(). Player2's
		//    score should be displayed in Graphics.RIGHT_PANEL. You may
		//    optionally set the font, font size, and font color if you like.
		//initialize the player 1 score
		getGraphics().setPanelText(Graphics.LEFT_PANEL,"Player 1 score: " + 
				score1);
		//initialize the player 2 score
		getGraphics().setPanelText(Graphics.RIGHT_PANEL,"Player 2 score: " + 
				score2);
	} // End of initGame() 

	/**
	 * Handles keyboard input at each game tick. This method checks if each of
	 * the control keys is pressed, and if so calls the corresponding method of
	 * the appropriate player's ship.
	 * 
	 * @param deltaTime the time since the previous tick in seconds.
	 */
	@Override
	void handleInput(double deltaTime) {
		// TODO

		// Handle rotation for Player 1. If the A key is pressed, rotate player
		// 1's ship counter-clockwise (CCW). If the D key is pressed, rotate
		// player 1's ship clockwise (CW). If both A and D are pressed, the ship
		// should not rotate. Remember that the direction of rotation (CW or
		// CCW) is given by the sign of the angle: positive angles are CW,
		// negative  angles are CCW. To calculate how much to rotate the ship,
		// you must multiply the rotation speed (given by
		// Config.SHIP_ROTATE_SPEED) by deltaTime.
		if(getKeyboard().isAPressed()){
			player1Ship.rotate(-Config.SHIP_ROTATE_SPEED * deltaTime);
		}
		if(getKeyboard().isDPressed()){
			player1Ship.rotate(Config.SHIP_ROTATE_SPEED * deltaTime);
		}
		// Handle acceleration for Player 1. If the W key is pressed, increase
		// the speed of player 1's ship. If the S key is pressed, decrease the
		// speed. To calculate how much to change the speed, you must multiply
		// the ship's acceleration (given by Config.SHIP_ACCELERATION) by
		// deltaTime.
		if(getKeyboard().isWPressed()){
			player1Ship.accelerate(Config.SHIP_ACCELERATION * deltaTime);
		}
		if(getKeyboard().isSPressed()){
			player1Ship.accelerate(-Config.SHIP_ACCELERATION * deltaTime);
		}
		// Handle rotation for Player 2 
		if(getKeyboard().isLeftPressed()){
			player2Ship.rotate(-Config.SHIP_ROTATE_SPEED * deltaTime);
		}
		if(getKeyboard().isRightPressed()){
			player2Ship.rotate(Config.SHIP_ROTATE_SPEED * deltaTime);
		}
		// Handle acceleration for Player 2 
		if(getKeyboard().isUpPressed()){
			player2Ship.accelerate(Config.SHIP_ACCELERATION * deltaTime);
		}
		if(getKeyboard().isDownPressed()){
			player2Ship.accelerate(-Config.SHIP_ACCELERATION * deltaTime);
		}
		// Handle firing for Player 1. If the left shift key is pressed, call
		// player 1's ship's fire() method.
		if(getKeyboard().isLshiftPressed()){
			player1Ship.fire();
		}
		// Handle firing for Player 2 
		if(getKeyboard().isEnterPressed()){
			player2Ship.fire();
		}
	} // End of handleInput()

	/**
	 * Increments the score for the indicated player. If the player has scored
	 * {@code Config.POINTS_TO_WIN} points, this method ends the game by
	 * calling {@code endGame()} and sets the text in {@code
	 * Graphics.CENTER_PANEL} to a message indicating which player won.
	 * 
	 * @param playerID the player who scored.
	 */

	@Override
	public void score(int playerID) {
		// TODO
		// if player 1 scores
		if(playerID == Config.PLAYER1_ID){
			score1++;
			getGraphics().setPanelText(Graphics.LEFT_PANEL, 
					"Player1 Score: " + score1);
		}
		//if player 2 scores
		if(playerID == Config.PLAYER2_ID){
			score2++;
			getGraphics().setPanelText(Graphics.RIGHT_PANEL, 
					"Player2 Score: " + score2);
		}
		// Increment the score for the indicated player.

		// Check if the game is over; if so, set an appropriate victory message
		// in Graphics.CENTER_PANEL and end the game. 
		//if player 1 scored points that meet the winning requirement
		if(score1 == Config.POINTS_TO_WIN){
			getGraphics().setPanelText(Graphics.CENTER_PANEL, "Player 1 wins");
			endGame();
		}
		//if player 2 scored points that meet the winning requirement
		else if ( score2 == Config.POINTS_TO_WIN){
			getGraphics().setPanelText(Graphics.CENTER_PANEL, "Player 2 wins");
			endGame();
		}


	} // End of score()
}
